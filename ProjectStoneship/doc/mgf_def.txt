
Master Game File specification 1.0
==================================


Data types
----------
Basic types:
    byte:    1 byte, signed
    short:   2 byte, signed
    int:     4 byte, signed
    long:    8 byte, signed
    integer types prefixed with u are unsigned
    
    float:   32 bit IEEE 754 floating point number
    double:  64 bit IEEE 754 floating point number 
    
    string:  zero terminated character sequence prefixed with 4 byte length field (length not including terminator or length field)
    

dependency = {string: filename, ushort: ordinal}
resource = {ubyte: type, ubyte: dummy, string: path}
subrecord = {ushort: type, uint: size, byte[~]: data} (6 bytes overhead)

uid = {ushort: ordinal, uint: id}

record = 
{
    ushort: type, 
    uint: sizeInBytes, 
    ushort: flags,
    ubyte: created author id,   <<<--- These are a proposal for version control. Not implemented ATM. Fields do not exist in files
    ubyte: modified author id,
    uint: recordId, 
    byte[~]: data
}

record_group = 
{
    ushort: type = 0x0000, 
    uint: sizeInBytes, 
    ushort: flags, 
    ushort: groupType, 
    uint: childRecordCount, 
    record[~]: records
}

author = {ubyte: author id, string: author name}


File structure
--------------

(file header)

ubyte[8]: 		 magic id = "NRPG3MGF"
string:		     game id
ushort:			 file flags

(team information)
ubyte:           author count
author[~]:       authors

(meta information)
string:		     description (descripton of MGF's content)
ulong:           creation timestamp (in UNIX epoch milliseconds format)

ushort:			 dependency count
dependency[~]:	 dependencies (list of MGFs which hold content that's used by this MGF and must be loaded before it)

ushort:			 resource count
resource[~]:	 resources (a list of paths/archive files where this MGFs BLOBs are stored)


(records)

uint:			 top group count
record_group[~]: top groups

ubyte:           end marker = 0xF0


Size fields
-----------
Many structures in Master Game Files contain size fields given in bytes. These almost exclusively precede array structures
and never contain the size of any other fields in the structure including the size field itself.


Strings and Encoding
--------------------
The data type string used in this document is a dynamic width field for textual data. Every string field
is prefixed with a 4-byte length field giving the exact amount of bytes in the string. The length field
is followed by the actual text data, which in turn is followed by a zero byte for termination. The string
itself must not contain a zero byte. Neither the zero terminator nor the length prefix is included in the 
value the length field stores.

The encoding to be used for all textual data is UTF-8.


Localization
------------
Facilities for automated localization will be provided. I promise.


File flags
----------
The file header has a 16-bit-field for 16 boolean flags. At the moment, none of the flags
are used, because why would you use flags for anything?


Resource files
--------------
All resources used by the engine are adressed via a virtual file system which maps internal resource paths
to the underlying system's file system. This virtual file system uses a system-independent, fixed naming scheme
for it's paths, which is defined as follows:

Folders are seperated by slash characters '/' (UNIX-Style paths)

The file system originates from a root directory, designated by '/'. This, however, is
an optional prefix, since the file system has no need for relative paths.
Therefore '/mdl/sas' and 'mdl/sas' _always_ point to the same directory.

Double slashes ('/snd/sas//foo.ogg') are ignored.

On root level, every type of resource is stored in it's own subfolder. The following types are defined:
	/mdl/    Model files
	/mat/    Material files
	/tex/    Texture files
	/snd/    Sound files
	/shd/    Shader programs
	/loc/    Locale files
	
These associations are implicit and enforced, meaning when a model is requested, the '/mdl/...' part
of it's path is added by the engine. Requesting '/mdl/cube.model' will result in '/mdl/mdl/cube.model' beeing
looked up.

By default, the engine maps the resource root to a folder named 'res/' in it's running directory. However, a MGF
may specify additional resource locations, which are defined in it's resource location header field and are used
aside the default location of the engine. Resource locations may be folders or archive files. The type field in a
resource entry specifies how to handle the resource given in the path field. The following values are possible:

	0: Single file
	1: File system (for simple folders)
	2: Zip file (resources are packed in a .zip archive)
	3: Gzip file (Implementation is considered optional for now)
	
Real file system paths given in the resource path field should be relative. The engine accepts both '/' and '\' as directory
seperators, and internally replaces them to match the system's ones (so MGFs created in a DOS environment can be used on *NIX operating systems).
However, it can not remap absoulte paths, so a MGF defining 'C:/example/' as a resource path would be unusable under UNIX.
	
Resource locations are searched by priority until the wanted resource is found, with the default priority beeing:
	1. 'res/'-Folder
	2. Requesting MGF's locations
	3. Other MGF's locations
	
This behaviour can, however, be altered by the priority field in a resource entry (independent of other entries in the same file).
The following priority settings are defined:
	0: Default priority (2nd when requested by same MGF, 3rd otherwise)
	1: Before default (Always 1st, before 'res/'-Folder and other MGFs)
	
During loading resource paths are gathered and organized to best meet the defined priorities. When a MGF defined multiple paths with the
same priority setting, they are organized in the order they were defined in the MGF's header. When multiple MGFs define one or more
resource path with the same priority, the paths of the last loaded MGF get searched before the paths of the ones loaded before the last MGF.

This priority system's purpose is to allow the easy creation of MGFs which override a game's default resources like a HD texture patch etc.
In that case the modder could store the new textures in an archive file, define that file as a resource location with priority setting 1 of an
otherwise empty MGF and instruct users to load the HD mod _after_ the main game files. 


Record groups
-------------
The main unit of record storage in a MGF are record groups. These containers list records of the same type and
allow fast skipping through the file. Additionally, record groups may follow records that need a set of data that can't be stored 
efficiently in subrecords or has a typical record structure (with ID etc.). For instance, a Dungeon record is always followed by
a group of Entity records defining all Entities in this Dungeon. If a record is followed by another one that it is logically linked to,
the ATTACHMENT flag in the first record's header is set.

Child records (records contained within a data field which still have a full record header) are only valid for records of type Group.
Every other record type must store all it's data in subrecords. This convention ensures consitency in the structure of the record's data fields.

Since records don't have a footer, an MGF can be "linearized" by simply ignoring all GROUP record headers, removing any sort of nesting. This can
be useful when searching for a specific record by ID or editor name without knowing whether it is nested or not. To further speed up the
process of searching, the flag field of a GROUP record contains information whether it contains identifiable records or not, so groups
that are not relevant for searching can be skipped.

Since record groups contain whole records as subunits, and records are not guaranteed to be read entirely by the
application, the amount of remaining bytes in the record data field is no safe indicator whether a full record is still
available or not. Therefore, group records provide an additional child record count field to the byte size field. This field does not
include the amount of records in groups nested within the group although it includes the nested group itself.

Upon loading, all top groups and their respective offsets in the file are indexed so record groups may
be found quickly when specific types of records are requested for load.

The flag field of record groups is defined as follows:

    0x0001    DELETED          Indicates this group record and all contained records should be ignored
    0x0002    ID_PRESENT       If set, at least one record in the group or within a nested group in this group has an ID
    0x0004    EDATA_PRESENT    If set, at least one record in the group or within a nested group in this group contains an _EDITOR_DATA subrecord
    0x0008    RESERVED
    0x0010    RESERVED
    0x0020    TOP_GROUP        Indicates a top group if set
    

IDs / UIDs
----------
Each record (see next chapter) holds an 4-byte wide identifier that is used to uniquely reference the object/entity/etc
defined by the record. The special ID 0xFFFFFFFF is used for records without the need for reference by other records.
It is the only ID that is allowed to exist more than once per MGF.

Wherever a record refers to another record, a 6-byte wide identifier is used. This so-called UID (unique identifier)
consists of the ordinal number of the MGF that defines the referenced record (a short field that prepends the int ID field)
and the 4-byte-ID of the referenced record. If, however, a record refers to another record defined in the same MGF, the special
MGF ordinal 0xFFFF is used. This special MGF ordinal is also used in savegames for objects/entities/etc
that are not defined in any MGF but were created during gameplay. Thus, the currently loaded savegame will always have the ordinal 0xFFFF.
Please note that the endianness of the ordinal/ID is treated as if both fields were seperate structures: {short, int}

This system restricts NRPG3 to a maximum possible MGF count of 65,535 with 4,294,967,296 IDs each. This amount
should be sufficient for any application the engine might have in it's lifespan.


Records
-------
The main data unit in a MGF is a record. A MGF may contain up to (2^32)-1 = 4,294,967,295 records (Only in theory. In practice, amounts
this high will most likely fail on 32-bit platforms as NRPG relies heavily on offset indices).

Every record has a 16 bit wide type ID that gives information on the type of the record's content. A table of
type IDs is given below.

A record contains a size field that contains the total size of the record's data field. It is used for skipping single records 
without having to read all it's data.

Each record holds a 4-byte-wide identifier that is used to reference the object/entity/etc defined by the record.
Some records may not use this field, in which cases it is set to the reserved value of 0xFFFFFFFF.
For more information on these IDs, see the previous chapter "IDs / UIDs"
	
For additional data, every record contains a flag byte. The meanings of the flag bits are as follows:

	0x0001    DELETED            If set, this record is scratched, and should not be bought
	0x0002    FULLOFEELS         If set, your hovercraft is full of eels (this flag is reserved)
	0x0004    EDATA_PRESENT      If set, this record contains an _EDITOR_DATA subrecord
	0x0008    ATTACHMENT         If set, this record is followed by an additional record that is logically connected to it (usually a GROUP)
	0x0010    BLOB_RECORD        If set, this record contains raw binary data rather than subrecords
	0x0020    RESERVED
	
The data of regular records is stored in subrecords, which consist of an 16 bit subtype ID and a 32 bit size field. 
Some definitions of subtype IDs may be specific for a given record type, meaning that subrecords with that subtype IDs
must not necessarily contain the same type of data across the whole file unless the type ID of their containing record is equal, too.
Most types of records, however, associate a common type and format of data in subrecords with common subtypes.
For example, subrecord 0x6 always contains a display name, while 0x100 is interpreted differently depending on the record type.

The subrecord itself is basically a byte array which is interpreted differently depending of the subrecord's type ID.
Because the [Modify] record (described in the following section) lists modifications on subrecord level, the smallest
possible modification of a field affects all other fields stored in the same subrecord. Therefore a subrecord should
only contain one field or a set of fields which can be assumed to be always modified together.

Some subrecords may be optional for some type of records. Those may appear once or never in the record. Most other 
defined subrecord types must appear exactly once. If such a subrecord is defined more than once, the result is
undefined. Some subrecord types, however, may appear more than once. These are marked accordingly in the list of subrecord
types. Missing obligatory records are considered major errors and will prevent proper loading of whatever required them.

If a record contains subrecords that are not defined/not required by that type of record, they are simply ignored.


Modify records
--------------
As of the incremental nature of the MGF ressource management, it is neccessary that a MGF can modify any
record present in one of it's dependent files in a way that does not require UID indirection. This functionality is
provided through [Modify] records which may adress any record that is identified by a UID. The structure of those
records depends on their target record type, and in most cases simply consists of all subrecords that differ from
their original definition.

Every [Modify] record provides metadata in the reserved FFF9 subrecord. The metadata consists of the target UID,
the type of the target record (for hinting the modification table) and a field that was formerly used as a mod type
designator but is now considered unused. It is, however, still included because who needs hard drive space anyway?

Modify records are ID-less, so the ID field in their record header contains the default value of 0xFFFFFFFF.


World records
-------------
Entities in NRPG3 are contained within worlds, of which two types exist: Outdoor Worlds and Dungeon Worlds.
Each are represented by a distinct record in their MGF which contains basic metadata about the world. Due to the
vast amount of objects/visual information/references contained within a world, data like Entities, Heightmaps etc.
is stored in seperate records which are grouped together and are stored right after the record they belong to.

The structure of Dungeons and Outdoors differs greatly. An Outdoor consists of a set of Chunks, which in turn
define the Entities contained within among other data like heightmaps etc. While not especially reserved for
outdoor places, Outdoor worlds are the preferred way of creating worlds with big amounts of scenery which in which
freedom of movement and thus dynamic loading and unloading of distant objects is desired.

The structure of Dungeons is more basic. They consist of just one single unit in which all entities are contained.
Upon loading of a Dungeon, all Entities within are loaded and placed in the game. Distant objects are not unloaded.
Same as Outdoor worlds are not exclusively for outdoor spaces, Dungeons are not neccessarily reserved for places
meant to represent indoor worlds. Both have the ability to display a skybox or terrain, for instance. However, due 
to the organization of stored data, a Dungeon is preferably the way to construct smaller spaces, since it's simple
data structure avoids loading times and bloating of MGFs.

The record structure of Outdoor worlds is as follows:
Outdoors are defined in the Outdoor top group. An [Outdoor] record defines the world's metadata (dimensions, name etc.).
The [Outdoor] record is followed by a [Group] record with group type [Group] which in turn contains a set of nested
[Group]s of group type [Chunk]. The nested layer represents rows (x-constant) of chunks. The rows are not neccesarily continuous, as
a world may arbitrarily define chunks anywhere in the grid, and thus rows may contain no chunk at all in which case the
row group is omitted. In order to identify the x coordinate to which a row group belongs, a dummy [Chunk] is inserted in front
of the groups child records, which's [grid position] subrecord contains the row's common x coordinate. The y coordinate is unused.

The record structure of Dungeon worlds is as follows:
Dungeons are defined in the Dungeon top group. A [Dungeon] record defines the world's metadata as well as all subrecords that
a chunk record would define. This means a Dungeon may have terrain, although the terrain's size is limited to the size of a
single chunk. Internally, Dungeons and Chunks are handled very similiar, with the only exception beeing the lack of metadata in
the latter. Same as with [Chunk] records, a [Dungeon] is followed by [Group] that lists all entities contained within. Since
Dungeons don't have a grid, there is no nesting of any kind apart from the single entity group. 


Record types
------------

Subrecords marked with [Optional] may appear once or never.
Subrecords marked with [*] may appear arbitrarily often, including never.
Subrecords marked with [#] may appear arbitrarily often, but at least once.

0: Group (alternate header format)

0A: Option
	100: Option data
	FFF0: editor data
		string: editor name
		

B0: ScalesClass (ID-less)
	100: Binary class data (see Scales specification)
	105: [Optional] Source
	FFF0: editor data
		

B1: ScalesGlobal
	0: [Optional] int value
		int: value
	1: [Optional] long value
		long: value
	2: [Optional] float value
		float: value
	3: [Optional] double value
		double: value
	4: [Optional] string value
		string: value
	5: [Optional] uid value
		uid: value
	100: Global data
		string: namespace
		string: name
		ubyte: data type (as in Scales specification. Subrecord with this ID is required)

BF: Keyword
    7: description
    100: Keyword data
        string: keyword name


C0: Outdoor World
	6: world display name
	100: world data
	    uint: flags (1 = HAS_SKY, 4 = CURVED_WORLD)
	    uint: x chunk resolution
	    uint: y chunk resolution
	    uint: radius (world curvature data)
	    
	
	
C1: Chunk group
	100: chunk group data
		vector2i: origin coordinates (for row groups y field is ignored)
	
C2: Chunk
    6: display name
    F: grid position
	100: chunk data
		ubyte: chunk flags ( 1 = IS_END_CHUNK )
		
C5: Dungeon
	6: dungeon display name

D0: Entity
	10: 3D posrot data
	11: scale data
	30: variable [*]
	F0: entity base data
	F2: count data
	
D1: Brush Entity
    10: 3D posrot data
    100: brush data
        ubyte: primitive (0 = cube)
        vector3d: low
        vector3d: high
	
FFF0: Modify
	FFF9: modification data
		uid: record to modify
		ushort: record type to modify
		ubyte: type of modification (0 = change, 1 = append)
	
FFFF: Reserved (Do not use!)

		
The following types are specific for SAS and may not be valid in every game using NRPG3.

(Entity base records)

800: BaseStatic
	5: world model information

801: BasePlant
	100: TreeGecko data
		bstring: TreeGecko generator resource name
		int: TreeGecko generator seed (ignored if not fixed)
		
	
810: BaseWeapon
	(common item data)
	5: world model information
	6: display name
	7: description
	8: trading information
	9: inventory information
	A: icon data
	B: identification data
	
	100: weapon data
		ubyte: weapon type (0 = sword one handed, 1 = sword two handed, 2 = bow, 4 = blunt)
		uint: weapon damage
		uint: weapon durability
		uint: weapon reach
		
811: BaseArmor
	(common item data)
	5: world model information
	6: display name
	7: description
	8: trading information
	9: inventory information
	A: icon data
	B: identification data
	
	100: armor data
		int: armor rating
		int: armor durability
		
820: BaseBook
	(common item data)
	5: world model information
	6: display name
	7: description
	8: trading information
	9: inventory information
	A: icon data
	B: identification data
	
	105: book text
		
821: BaseStuff
	(common item data)
	5: world model information
	6: display name
	7: description
	8: trading information
	9: inventory information
	A: icon data
	B: identification data
	
822: BaseFood
	(common item data)
	5: world model information
	6: display name
	7: description
	8: trading information
	9: inventory information
	A: icon data
	B: identification data
	
	100: food data
		float: nutrition value

82A: BaseContainer
	5: world model data
	6: display name
	10E: container data
		int: slot count
		int: contained item count
	10F: contained item*
		
		
		
Common subrecord types
----------------------
Common subrecord types with typical fields they contain (these definitions may not apply to all record types):
	
0: subgroup
	record_group: sub group record
	
1: property
	string: name
	ubyte: type
	byte[#]: data
	
(the following subrecords are common for all item types)
	
5: world model information
	string: model resource name
	
6: display name
	string: name
	
7: description
	string: description
	
8: trading information
	uint:  trading value
	ubyte: interest rating
	
A: inventory information
	byte: item flags (0x01 = IS_ESSENTIAL, 0x02 = IS_CURRENCY, 0x04 = IS_UNIDENTIFIED, 0x10 = IS_UNIQUE)
	byte: slot count (0 means item does not take up any slots)
	uint: max stack size (0 means unlimited, 1 means does not stack (formerly set by flag))
	
B: icon data
	string: icon resource name
	
C: identification data (only present if undentified flag in SR 9 is set)
	uid: indentified item entity id
	
D: count
	uint: count

F: grid position data
	int: x
	int: y

10: 3D posrot data
	vector3f: position
	vector3f: rotation
	
11: scale data
	float: scale
	
30: variable data
    string: variable name
    ubyte: variable TYPE_PICKUP
    byte[*]: data
	
F0: entity base data
	uid: base uid
	ushort: base type id
    ushort: base index
	
100: specific data
	
105: text data
	string: text

10E: container data
	uint: slot count
	uint: contained item count
	
10F: contained item data (may appear for every item contained within enclosing record)
    uid: item uid
    uint: item count

FFF0: editor data
	string: editor name
		
FFF9: modify metadata (not to be used in any other record)

FFFA: modify remove
	short: subrecord type to be removed
	uint: index of subrecord (ignored if only one present/ depends on user)

